/* FeatureIDE - A Framework for Feature-Oriented Software Development
 * Copyright (C) 2005-2017  FeatureIDE team, University of Magdeburg, Germany
 *
 * This file is part of FeatureIDE.
 * 
 * FeatureIDE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * FeatureIDE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with FeatureIDE.  If not, see <http://www.gnu.org/licenses/>.
 *
 * See http://featureide.cs.ovgu.de/ for further information.
 */
package de.ovgu.featureide.fm.core.explanations;

import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import de.ovgu.featureide.fm.core.base.IConstraint;
import de.ovgu.featureide.fm.core.base.IFeature;
import de.ovgu.featureide.fm.core.base.IFeatureModelElement;
import de.ovgu.featureide.fm.core.configuration.SelectableFeature;
import de.ovgu.featureide.fm.core.editing.FeatureModelToNodeTraceModel.FeatureModelElementTrace;

/**
 * Data class holding the explanation for a defect in a feature model.
 * Instances of this class are generated by {@link ExplanationCreator}.
 * 
 * @author Timo G&uuml;nther
 * @author Sofia Ananieva
 */
public class Explanation implements Cloneable {
	/**
	 * <p>
	 * The atomic unit an explanation is composed of.
	 * </p>
	 * 
	 * <p>
	 * Refers to exactly one of the following:
	 * </p>
	 * 
	 * <ol>
	 * <li>The {@link FeatureModelElementTrace trace} to a {@link IFeatureModelElement feature model element}</li>
	 * <li>The {@link SelectableFeature selection} of a {@link IFeature feature}</li>
	 * </ol>
	 * 
	 * <p>
	 * These elements are possible reasons in the following explanation scenarios:
	 * </p>
	 * 
	 * <ul>
	 * <li>Feature model defects: 1</li>
	 * <li>Configurations: 1, 2</li>
	 * </ul>
	 * 
	 * @author Timo G&uuml;nther
	 * @author Sofia Ananieva
	 */
	public class Reason implements Cloneable {
		/** The trace of this reason. */
		private final FeatureModelElementTrace trace;
		/** The feature that has been selected or unselected. */
		private final SelectableFeature featureSelection;
		
		/**
		 * Constructs a new instance of this class.
		 * @param trace the trace of this reason; not null
		 */
		private Reason(FeatureModelElementTrace trace) {
			this.trace = trace;
			this.featureSelection = null;
		}
		
		/**
		 * Constructs a new instance of this class.
		 * @param featureSelection the feature that has been selected or unselected; not null
		 */
		private Reason(SelectableFeature featureSelection) {
			this.trace = null;
			this.featureSelection = featureSelection;
		}
		
		/**
		 * Constructs a new instance of this class.
		 * @param other instance to clone
		 */
		private Reason(Reason other) {
			this.trace = other.trace;
			this.featureSelection = other.featureSelection;
		}
		
		/**
		 * Returns the containing explanation.
		 * @return the containing explanation; not null
		 */
		public Explanation getExplanation() {
			return Explanation.this;
		}
		
		/**
		 * Returns the trace of this reason.
		 * @return the trace of this reason; not null
		 */
		public FeatureModelElementTrace getTrace() {
			return trace;
		}
		
		/**
		 * Returns the feature that has been selected or unselected.
		 * @return the feature that has been selected or unselected; not null
		 */
		public SelectableFeature getFeatureSelection() {
			return featureSelection;
		}
		
		/**
		 * Returns the confidence of this reason.
		 * This is the likelihood with which this is causing the defect.
		 * Should be a value between 0 and 1.
		 * @return the confidence of this reason
		 */
		public float getConfidence() {
			/*
			 * TODO Provide a useful explanation count for redundant constraints.
			 * The explanation count for redundant constraints is currently useless.
			 * To avoid confusing the user, do not take it into account when giving confidence hints and default to 1.
			 */
			if (getMode() == Mode.REDUNDANT_CONSTRAINT) {
				return 1;
			}
			float confidence = (float) reasonCounts.get(this)/getExplanationCount();
			confidence = Math.max(0.0f, Math.min(1.0f, confidence)); //Clamp between 0 and 1 (just in case).
			return confidence;
		}
		
		@Override
		public Reason clone() {
			return new Reason(this);
		}
		
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((trace == null) ? 0 : trace.hashCode());
			result = prime * result + ((featureSelection == null) ? 0 : featureSelection.hashCode());
			return result;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Reason other = (Reason) obj;
			if (trace == null) {
				if (other.trace != null)
					return false;
			} else if (!trace.equals(other.trace))
				return false;
			if (featureSelection == null) {
				if (other.featureSelection != null)
					return false;
			} else if (!featureSelection.equals(other.featureSelection))
				return false;
			return true;
		}
		
		@Override
		public String toString() {
			return getClass().getSimpleName() + " ["
					+ "trace=" + trace + ", "
					+ "featureSelection=" + featureSelection + "]";
		}
	}
	
	/**
	 * Differentiates between different modes of explaining.
	 */
	public static enum Mode {
		REDUNDANT_CONSTRAINT,
		DEAD_FEATURE,
		FALSE_OPTIONAL_FEATURE,
		AUTOMATIC_SELECTION,
	}
	
	/** The explanation mode. */
	private Mode mode;
	/** The defect feature model element. */
	private IFeatureModelElement defectElement;
	/** The automatic selection. */
	private SelectableFeature automaticSelection;
	/** True if this explanation is for an implicit constraint. */
	private boolean implicit;
	
	/** The reasons this explanation is composed of mapped to how often the respective reason has been generated. */
	private final Map<Reason, Integer> reasonCounts = new LinkedHashMap<>();
	/** How many explanations have been generated and rolled into one for this explanation. */
	private int explanationCount = 1;
	
	/**
	 * Returns the explanation mode.
	 * @return the explanation mode
	 */
	public Mode getMode() {
		return mode;
	}
	
	/**
	 * Returns the defect element.
	 * @return the defect element
	 */
	public IFeatureModelElement getDefectElement() {
		return defectElement;
	}
	
	/**
	 * Returns the automatic selection.
	 * @return the automatic selection
	 */
	public SelectableFeature getAutomaticSelection() {
		return automaticSelection;
	}
	
	/**
	 * Sets the defect feature model element to a dead feature.
	 * Also sets the mode accordingly.
	 * @param defectElement dead feature
	 */
	public void setDefectDeadFeature(IFeature defectElement) {
		this.mode = Explanation.Mode.DEAD_FEATURE;
		this.automaticSelection = null;
		this.defectElement = defectElement;
	}
	
	/**
	 * Sets the defect feature model element to a false-optional feature.
	 * Also sets the mode accordingly.
	 * @param defectElement false-optional feature
	 */
	public void setDefectFalseOptionalFeature(IFeature defectElement) {
		this.mode = Explanation.Mode.FALSE_OPTIONAL_FEATURE;
		this.automaticSelection = null;
		this.defectElement = defectElement;
	}
	
	/**
	 * Sets the defect feature model element to a redundant feature.
	 * Also sets the mode accordingly.
	 * @param defectElement redundant constraint
	 */
	public void setDefectRedundantConstraint(IConstraint defectElement) {
		this.mode = Explanation.Mode.REDUNDANT_CONSTRAINT;
		this.automaticSelection = null;
		this.defectElement = defectElement;
	}
	
	/**
	 * Sets the automatic selection.
	 * Also sets the mode accordingly.
	 * @param automaticSelection the automatic selection
	 */
	public void setAutomaticSelection(SelectableFeature automaticSelection) {
		this.mode = Explanation.Mode.AUTOMATIC_SELECTION;
		this.automaticSelection = automaticSelection;
		this.defectElement = null;
	}
	
	/**
	 * Returns true iff this explanation is for an implicit constraint.
	 * @return true iff this explanation is for an implicit constraint
	 */
	public boolean isImplicit() {
		return implicit;
	}
	
	/**
	 * Sets whether this explanation is for an implicit constraint.
	 * @param implicit whether this explanation is for an implicit constraint
	 */
	public void setImplicit(boolean implicit) {
		this.implicit = implicit;
	}
	
	/**
	 * Returns how many explanations have been generated and rolled into one for this explanation.
	 * @return how many explanations have been generated and rolled into one for this explanation
	 */
	public int getExplanationCount() {
		return explanationCount;
	}
	
	/**
	 * Sets the explanation count.
	 * @param explanationCount explanation count
	 */
	public void setExplanationCount(int explanationCount) {
		this.explanationCount = explanationCount;
	}
	
	/**
	 * Returns the reasons this explanation is composed of.
	 * @return the reasons this explanation is composed of
	 */
	public Set<Reason> getReasons() {
		return reasonCounts.keySet();
	}
	
	/**
	 * Adds the given reason to this explanation.
	 * Also increments its occurrence count.
	 * @param reason reason to add
	 */
	public void addReason(Reason reason) {
		addReason(reason, 1);
	}
	
	/**
	 * Adds the given reason to this explanation.
	 * Increases its occurrence count by the given number.
	 * @param reason reason to add
	 * @param count how often to add the given reason
	 */
	protected void addReason(Reason reason, int count) {
		reason = new Reason(reason);
		final Integer reasonCount = reasonCounts.get(reason);
		reasonCounts.put(reason, (reasonCount == null ? 0 : reasonCount) + count);
	}
	
	/**
	 * Adds all given reasons to this explanation.
	 * @param reasons reasons to add
	 */
	public void addReasons(Collection<Reason> reasons) {
		for (final Reason reason : reasons) {
			addReason(reason);
		}
	}
	
	/**
	 * Adds a new reason to this explanation.
	 * @param trace trace of the reason to add
	 */
	public void addReason(FeatureModelElementTrace trace) {
		addReason(new Reason(trace));
	}
	
	/**
	 * Adds a new reason to this explanation.
	 * @param featureSelection a selected or unselected feature
	 */
	public void addReason(SelectableFeature featureSelection) {
		addReason(new Reason(featureSelection));
	}
	
	/**
	 * Adds the given reason to this explanation if it is not already contained.
	 * @param reason reason to add
	 */
	public void addUniqueReason(Reason reason) {
		reason = new Reason(reason);
		final Integer value = reasonCounts.get(reason);
		if (value == null) {
			reasonCounts.put(reason, 1);
		}
	}
	
	/**
	 * Adds all given reasons to this explanation if they are not already contained.
	 * @param reasons reasons to add
	 */
	public void addUniqueReasons(Collection<Reason> reasons) {
		for (final Reason reason : reasons) {
			addUniqueReason(reason);
		}
	}
	
	/**
	 * Adds a new reason to this explanation if it is not already contained.
	 * @param trace trace of the reason to add
	 */
	public void addUniqueReason(FeatureModelElementTrace trace) {
		addUniqueReason(new Reason(trace));
	}
	
	/**
	 * Adds a new reason to this explanation if it is not already contained.
	 * @param featureSelection a selected or unselected feature
	 */
	public void addUniqueReason(SelectableFeature featureSelection) {
		addUniqueReason(new Reason(featureSelection));
	}
	
	/**
	 * Adds all the reasons from the given explanation with their correct occurrence count to this explanation.
	 * Also sums up the explanation counts.
	 * @param explanation explanation to add to this one
	 */
	public void addExplanation(Explanation explanation) {
		for (final Entry<Reason, Integer> reasonCount : explanation.reasonCounts.entrySet()) {
			addReason(reasonCount.getKey(), reasonCount.getValue());
		}
		explanationCount += explanation.explanationCount;
	}
	
	/**
	 * Returns the amount of reasons.
	 * @return the amount of reasons
	 */
	public int getReasonCount() {
		return reasonCounts.size();
	}
	
	/**
	 * Returns the reasons this explanation is composed of mapped to how often the respective reason has been generated.
	 * @return the reasons this explanation is composed of mapped to how often the respective reason has been generated
	 */
	public Map<Reason, Integer> getReasonCounts() {
		return reasonCounts;
	}
	
	/**
	 * Sets the reason and explanation counts to the ones in the given explanation.
	 * The reasons themselves are not copied, thus maintaining the logical validity of this explanation.
	 * @param explanation explanation with reason and explanation counts to copy
	 */
	public void setCounts(Explanation explanation) {
		for (final Entry<Reason, Integer> reasonCount : reasonCounts.entrySet()) {
			reasonCount.setValue(explanation.reasonCounts.get(reasonCount.getKey()));
		}
		explanationCount = explanation.explanationCount;
	}
	
	/**
	 * Returns all feature model elements affected by this explanation.
	 * An element is considered affected if it is the defect element, the source element of any reason or part of any such constraint.
	 * @return all feature model elements affected by this explanation
	 */
	public Set<IFeatureModelElement> getAffectedElements() {
		final Set<IFeatureModelElement> affectedElements = new LinkedHashSet<>();
		for (final Reason reason : getReasons()) {
			affectedElements.addAll(reason.getTrace().getElements());
		}
		affectedElements.add(getDefectElement());
		final Set<IFeatureModelElement> constraintElements = new LinkedHashSet<>();
		for (final IFeatureModelElement affectedElement : affectedElements) {
			if (!(affectedElement instanceof IConstraint)) {
				continue;
			}
			final IConstraint constraint = (IConstraint) affectedElement;
			constraintElements.addAll(constraint.getContainedFeatures());
		}
		affectedElements.addAll(constraintElements);
		return affectedElements;
	}
	
	/**
	 * Returns all features affected by this explanation.
	 * @return all features affected by this explanation
	 */
	public Set<IFeature> getAffectedFeatures() {
		final Set<IFeature> affectedFeatures = new LinkedHashSet<>();
		for (final IFeatureModelElement affectedElement : getAffectedElements()) {
			if (affectedElement instanceof IFeature) {
				affectedFeatures.add((IFeature) affectedElement);
			}
		}
		return affectedFeatures;
	}
	
	/**
	 * Returns all constraints affected by this explanation.
	 * @return all constraints affected by this explanation
	 */
	public Set<IConstraint> getAffectedConstraints() {
		final Set<IConstraint> affectedConstraints = new LinkedHashSet<>();
		for (final IFeatureModelElement affectedElement : getAffectedElements()) {
			if (affectedElement instanceof IConstraint) {
				affectedConstraints.add((IConstraint) affectedElement);
			}
		}
		return affectedConstraints;
	}
	
	@Override
	public Explanation clone() {
		final Explanation clone = new Explanation();
		clone.mode = mode;
		clone.defectElement = defectElement;
		clone.explanationCount = explanationCount;
		clone.reasonCounts.putAll(reasonCounts);
		return clone;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((defectElement == null) ? 0 : defectElement.hashCode());
		result = prime * result + explanationCount;
		result = prime * result + (implicit ? 1231 : 1237);
		result = prime * result + ((mode == null) ? 0 : mode.hashCode());
		result = prime * result + ((reasonCounts == null) ? 0 : reasonCounts.hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Explanation other = (Explanation) obj;
		if (defectElement == null) {
			if (other.defectElement != null)
				return false;
		} else if (!defectElement.equals(other.defectElement))
			return false;
		if (explanationCount != other.explanationCount)
			return false;
		if (implicit != other.implicit)
			return false;
		if (mode != other.mode)
			return false;
		if (reasonCounts == null) {
			if (other.reasonCounts != null)
				return false;
		} else if (!reasonCounts.equals(other.reasonCounts))
			return false;
		return true;
	}
	
	@Override
	public String toString() {
		return getClass().getSimpleName() + " ["
				+ "mode=" + mode + ", "
				+ "defectElement=" + defectElement + ", "
				+ "automaticSelection=" + automaticSelection + ", "
				+ "implicit=" + implicit + ", "
				+ "reasonCounts=" + reasonCounts + ", "
				+ "explanationCount=" + explanationCount + "]";
	}
}