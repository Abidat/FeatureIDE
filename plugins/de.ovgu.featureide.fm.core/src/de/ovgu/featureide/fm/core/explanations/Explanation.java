/* FeatureIDE - A Framework for Feature-Oriented Software Development
 * Copyright (C) 2005-2016  FeatureIDE team, University of Magdeburg, Germany
 *
 * This file is part of FeatureIDE.
 * 
 * FeatureIDE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * FeatureIDE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with FeatureIDE.  If not, see <http://www.gnu.org/licenses/>.
 *
 * See http://featureide.cs.ovgu.de/ for further information.
 */
package de.ovgu.featureide.fm.core.explanations;

import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.prop4j.Literal;
import org.prop4j.Literal.FeatureAttribute;

import de.ovgu.featureide.fm.core.base.IConstraint;
import de.ovgu.featureide.fm.core.base.IFeature;
import de.ovgu.featureide.fm.core.base.IFeatureModel;
import de.ovgu.featureide.fm.core.base.IFeatureModelElement;

/**
 * Data class holding the explanation for a defect in a feature model.
 * Instances of this class are generated by {@link LTMS}.
 * 
 * @author Timo Guenther
 * @author Sofia Ananieva
 */
public class Explanation implements Cloneable {
	/**
	 * The atomic unit an explanation is composed of.
	 * 
	 * @author Timo Guenther
	 * @author Sofia Ananieva
	 */
	public class Reason implements Cloneable {
		/** the literal of this reason */
		private final Literal literal;
		
		/**
		 * Constructs a new instance of this class.
		 * @param literal the literal of this reason
		 */
		public Reason(Literal literal) {
			this.literal = literal;
		}
		
		/**
		 * Returns the literal of this reason.
		 * @return the literal of this reason
		 */
		public Literal getLiteral() {
			return literal;
		}
		
		/**
		 * Returns the confidence of this reason.
		 * This is the likelihood with which this is causing the defect.
		 * Should be a value between 0 and 1.
		 * @return the confidence of this reason
		 */
		public float getConfidence() {
			return (float) reasonCounts.get(this)/getExplanationCount();
		}
		
		@Override
		public Reason clone() {
			return new Reason(literal);
		}
		
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			if (literal != null && literal.getSourceAttribute() != FeatureAttribute.CONSTRAINT)
				result = prime * result + (literal.var == null ? 0 : literal.var.hashCode());
			result = prime * result + (literal == null ? 0 : literal.origin);
			return result;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Reason other = (Reason) obj;
			if (literal == null) {
				if (other.literal != null)
					return false;
			} else if (literal.origin != other.literal.origin) {
				return false;
			} else if (literal.getSourceAttribute() != FeatureAttribute.CONSTRAINT //any literal of the same constraint denotes the same reason
					&& !literal.var.equals(other.literal.var))
				return false;
			return true;
		}
		
		@Override
		public String toString() {
			return "Reason["
					+ "literal=" + literal
					+ "]";
		}
	}
	
	/**
	 * Differentiates between different modes of explaining.
	 */
	public static enum Mode {
		REDUNDANT_CONSTRAINT,
		DEAD_FEATURE,
		FALSE_OPTIONAL_FEATURE
	}
	
	/** the reasons this explanation is composed of mapped to how often the respective reason has been generated */
	private final Map<Reason, Integer> reasonCounts = new LinkedHashMap<>();
	
	/** the explanation mode */
	private Mode mode;
	/** the feature model context of this explanation */
	private IFeatureModel fm;
	/** the defect feature model element */
	private IFeatureModelElement defectElement;
	/** true if this explanation is for an implicit constraint */
	private boolean implicit;
	/** how many explanations have been generated and rolled into one for this explanation */
	private int explanationCount = 1;
	
	/**
	 * Returns the explanation mode.
	 * @return the explanation mode
	 */
	public Mode getMode() {
		return mode;
	}
	
	/**
	 * Returns the feature model context of this explanation.
	 * @return the feature model context of this explanation
	 */
	public IFeatureModel getFeatureModel() {
		return fm;
	}
	
	/**
	 * Sets the feature model.
	 * @param fm feature model
	 */
	public void setFeatureModel(IFeatureModel fm) {
		this.fm = fm;
	}
	
	/**
	 * Returns the defect element.
	 * @return the defect element
	 */
	public IFeatureModelElement getDefectElement() {
		return defectElement;
	}
	
	/**
	 * Sets the defect feature model element to a dead feature.
	 * Also sets the mode accordingly.
	 * @param defectElement dead feature
	 */
	public void setDefectDeadFeature(IFeature defectElement) {
		this.mode = Explanation.Mode.DEAD_FEATURE;
		this.defectElement = defectElement;
	}
	
	/**
	 * Sets the defect feature model element to a false-optional feature.
	 * Also sets the mode accordingly.
	 * @param defectElement false-optional feature
	 */
	public void setDefectFalseOptionalFeature(IFeature defectElement) {
		this.mode = Explanation.Mode.FALSE_OPTIONAL_FEATURE;
		this.defectElement = defectElement;
	}
	
	/**
	 * Sets the defect feature model element to a redundant feature.
	 * Also sets the mode accordingly.
	 * @param defectElement redundant constraint
	 */
	public void setDefectRedundantConstraint(IConstraint defectElement) {
		this.mode = Explanation.Mode.REDUNDANT_CONSTRAINT;
		this.defectElement = defectElement;
	}
	
	/**
	 * Returns true iff this explanation is for an implicit constraint.
	 * @return true iff this explanation is for an implicit constraint
	 */
	public boolean isImplicit() {
		return implicit;
	}
	
	/**
	 * Sets whether this explanation is for an implicit constraint.
	 * @param implicit whether this explanation is for an implicit constraint
	 */
	public void setImplicit(boolean implicit) {
		this.implicit = implicit;
	}
	
	/**
	 * Returns how many explanations have been generated and rolled into one for this explanation.
	 * @return how many explanations have been generated and rolled into one for this explanation
	 */
	public int getExplanationCount() {
		return explanationCount;
	}
	
	/**
	 * Sets the explanation count.
	 * @param explanationCount explanation count
	 */
	public void setExplanationCount(int explanationCount) {
		this.explanationCount = explanationCount;
	}
	
	/**
	 * Returns the reasons this explanation is composed of.
	 * @return the reasons this explanation is composed of
	 */
	public Set<Reason> getReasons() {
		return reasonCounts.keySet();
	}
	
	/**
	 * Adds the given reason to this explanation.
	 * Also increments its occurrence count.
	 * @param reason reason to add
	 */
	public void addReason(Reason reason) {
		addReason(reason, 1);
	}
	
	/**
	 * Adds the given reason to this explanation.
	 * Increases its occurrence count by the given number.
	 * @param reason reason to add
	 * @param count how often to add the given reason
	 */
	protected void addReason(Reason reason, int count) {
		reasonCounts.put(reason, reasonCounts.getOrDefault(reason, 0) + count);
	}
	
	/**
	 * Adds all given reason to this explanation.
	 * @param reasons reasons to add
	 */
	public void addReasons(Collection<Reason> reasons) {
		for (final Reason reason : reasons) {
			addReason(reason);
		}
	}
	
	/**
	 * Adds a reason with the given literal to this explanation.
	 * @param literal literal of the reason to add
	 */
	public void addReasonLiteral(Literal literal) {
		addReason(new Reason(literal));
	}
	
	/**
	 * Adds a reason for each given literal to this explanation.
	 * @param literals literals of the reasons to add
	 */
	public void addReasonLiterals(Collection<Literal> literals) {
		for (final Literal literal : literals) {
			addReasonLiteral(literal);
		}
	}
	
	/**
	 * Adds the given reason to this explanation if it is not already contained.
	 * @param reason reason to add
	 */
	public void addUniqueReason(Reason reason) {
		reasonCounts.putIfAbsent(reason, 1);
	}
	
	/**
	 * Adds all given reasons to this explanation if they are not already contained.
	 * @param reasons reasons to add
	 */
	public void addUniqueReasons(Collection<Reason> reasons) {
		for (final Reason reason : reasons) {
			addUniqueReason(reason);
		}
	}
	
	/**
	 * Adds a reason with the given literal to this explanation if it is not already contained.
	 * @param literal literal of the reason to add
	 */
	public void addUniqueReasonLiteral(Literal literal) {
		addUniqueReason(new Reason(literal));
	}
	
	/**
	 * Adds a reason for each given literal to this explanation if it is not already contained.
	 * @param literals literals of the reasons to add
	 */
	public void addUniqueReasonLiterals(Collection<Literal> literals) {
		for (final Literal literal : literals) {
			addUniqueReasonLiteral(literal);
		}
	}
	
	/**
	 * Adds all the reasons from the given explanation with their correct occurrence count to this explanation.
	 * Also sums up the explanation counts.
	 * @param explanation explanation to add to this one
	 */
	public void addExplanation(Explanation explanation) {
		for (final Entry<Reason, Integer> reasonCount : explanation.reasonCounts.entrySet()) {
			addReason(reasonCount.getKey(), reasonCount.getValue());
		}
		explanationCount += explanation.explanationCount;
	}
	
	/**
	 * Returns the amount of reasons.
	 * @return the amount of reasons
	 */
	public int getReasonCount() {
		return reasonCounts.size();
	}
	
	/**
	 * Returns the reasons this explanation is composed of mapped to how often the respective reason has been generated.
	 * @return the reasons this explanation is composed of mapped to how often the respective reason has been generated
	 */
	public Map<Reason, Integer> getReasonCounts() {
		return reasonCounts;
	}
	
	/**
	 * Sets the reason and explanation counts to the ones in the given explanation.
	 * The reasons themselves are not copied, thus maintaining the logical validity of this explanation.
	 * @param explanation explanation with reason and explanation counts to copy
	 */
	public void setCounts(Explanation explanation) {
		for (final Entry<Reason, Integer> reasonCount : reasonCounts.entrySet()) {
			reasonCount.setValue(explanation.reasonCounts.get(reasonCount.getKey()));
		}
		explanationCount = explanation.explanationCount;
	}
	
	@Override
	public Explanation clone() {
		final Explanation clone = new Explanation();
		clone.mode = mode;
		clone.fm = fm;
		clone.defectElement = defectElement;
		clone.explanationCount = explanationCount;
		clone.reasonCounts.putAll(reasonCounts);
		return clone;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((defectElement == null) ? 0 : defectElement.hashCode());
		result = prime * result + explanationCount;
		result = prime * result + ((fm == null) ? 0 : fm.hashCode());
		result = prime * result + (implicit ? 1231 : 1237);
		result = prime * result + ((mode == null) ? 0 : mode.hashCode());
		result = prime * result + ((reasonCounts == null) ? 0 : reasonCounts.hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Explanation other = (Explanation) obj;
		if (defectElement == null) {
			if (other.defectElement != null)
				return false;
		} else if (!defectElement.equals(other.defectElement))
			return false;
		if (explanationCount != other.explanationCount)
			return false;
		if (fm == null) {
			if (other.fm != null)
				return false;
		} else if (!fm.equals(other.fm))
			return false;
		if (implicit != other.implicit)
			return false;
		if (mode != other.mode)
			return false;
		if (reasonCounts == null) {
			if (other.reasonCounts != null)
				return false;
		} else if (!reasonCounts.equals(other.reasonCounts))
			return false;
		return true;
	}
	
	@Override
	public String toString() {
		return "Explanation["
				+ "reasonCounts=" + reasonCounts + ", "
				+ "mode=" + mode + ", "
				+ "fm=" + fm + ", "
				+ "defectElement=" + defectElement + ", "
				+ "implicit=" + implicit + ", "
				+ "explanationCount=" + explanationCount
				+ "]";
	}
}