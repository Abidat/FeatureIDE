import java.util.Iterator;

// of graph

  // ***********************************************************************

public refines class Vertex {
	public LinkedList adjacentVertices = new LinkedList();
	 
    public LinkedList neighbors = new LinkedList();

	public void adjustAdorns(Vertex the_vertex, int index) {	
	}
	
    public  Vertex assignName( String name ) {
        this.name = name;
        return ( Vertex ) this;
    }

    public void addNeighbor( Neighbor n ) {
        neighbors.add( n );
    }

    public VertexIter getNeighbors() {
        return new VertexIter() {
                private Iterator iter = neighbors.iterator();
                public Vertex next() { return ((Neighbor)iter.next()).end; }
                public boolean hasNext() { return iter.hasNext(); }
            };
    }

    public EdgeIter getEdges()
    {
        return new EdgeIter()
            {
                private Iterator iter = neighbors.iterator();
                public EdgeIfc next( )
                {
                  return ( ( EdgeIfc ) ( ( Neighbor ) iter.next( ) ).edge );
                }
                public boolean hasNext() { return iter.hasNext(); }
            };
    }

    public void display() {
        System.out.print( " Node " + getName() + " connected to: " );

        for(VertexIter vxiter = getNeighbors(); vxiter.hasNext(); )
         {
            Vertex v = vxiter.next();
            System.out.print( v.getName() + ", " );
        }

        System.out.println();
    }
}
